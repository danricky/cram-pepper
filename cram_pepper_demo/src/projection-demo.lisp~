(in-package :demo)

;; Menu functions start
(defun menu-one()
	(princ "Hello my name is pepper and how may I help you?
		Please use the number corresponding to your request.

		------Select a number-----
		1. Help me find a product.
		2. I just wanted to say hi."))

(defun menu-two()
	(princ "What do you want?
		Please use the number corresponding to your request.

		------Select a number-----
		1. Cereal.
		2. Milk.
		3. I think I am fine."))

;; Interaction execution
(defun interaction()
	(cram-urdf-projection:with-simulated-robot (park-arms))
	(reposition-robot)
	(menu-one)
	
	(let* '((?productname nil)
			(?productposelist nil))
		(setf response (read t))

		;;first conditional statement start
		(cond ((= response 1)
				(menu-two)

			;;second conditional statement start
			(setf proresponse (read t))
			(cond ((= proresponse 1)
				(setf ?productname 'cereal)
				(setf ?productposelist (get-shelf-pose ?productname))
				(format t "Alright. Please follow me!"))
			((= proresponse 2)
				(setf ?productname 'milk)
				(setf ?productposelist (get-shelf-pose ?productname))
				(format t "Alright. Please follow me!"))
			)
			;;second conditional statement end
			

			)
			((= response 2 )
				(format t "That's nice of you. Thanks!"))
			);;first conditional statement end

	) ;;let close brackets
 ) ;;interaction close brackets


;; Demo one
; (defun demo-one(?shelf-pose-lists ?product-name)
; 	(cram-urdf-projection:with-simulated-robot

; 		;;function details

	
; 	))